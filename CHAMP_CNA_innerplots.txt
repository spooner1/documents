    library(preprocessCore)
    library(DNAcopy)
    data(probe.features.epic)
    #data(probe.features)
    pheno <- myLoad$pd$Sample_Group
    control = TRUE
    freqThreshold <- 0.3
    intensity <- myLoad$intensity
    # interne Kontrolle
      controlGroup = "Prim"
      myIntensity <- intensity
    # keine Kontrolle
      data(champBloodCtls)
      ctlIntensity = bloodCtl$intensity
      controlGroup = "champCtls"
      pheno <- c(pheno, bloodCtl$pd$Sample_Group)
      myIntensity <- cbind(intensity, ctlIntensity[rownames(intensity),])
    names <- colnames(myIntensity)
    intsqn <- normalize.quantiles(as.matrix(myIntensity))
    colnames(intsqn) <- names
    intsqnlog <- log2(intsqn)
    intsqnlogratio <- apply(intsqnlog[, which(!pheno %in% controlGroup)], 2, function(x) x - rowMeans(as.data.frame(intsqnlog[,which(pheno %in% controlGroup)])))
    ints <- data.frame(intensity, probe.features[rownames(intensity), c("MAPINFO", "CHR")])
    ints$MAPINFO <- as.numeric(ints$MAPINFO)
    levels(ints$CHR)[levels(ints$CHR) == "X"] <- "23"
    levels(ints$CHR)[levels(ints$CHR) == "Y"] <- "24"
    CHR <- ints$CHR
    MAPINFO <- ints$MAPINFO
    groupResult <- list()
    groups <- setdiff(unique(pheno), controlGroup)
    tmp_pheno <- pheno[pheno %in% groups]
    g <- 1
    data_group = intsqnlogratio[, which(tmp_pheno == groups[g])]
    ints_group = ints[, which(tmp_pheno == groups[g])]
    row.names(ints_group) = row.names(ints)
    group.CNA.object <- CNA(data_group, CHR, MAPINFO, data.type = "logratio", sampleid = paste(paste(colnames(data_group),   tmp_pheno[which(tmp_pheno == groups[g])]),   "qn"))
    group.smoothed.CNA.object <- smooth.CNA(group.CNA.object)
    group.segment.smoothed.CNA.object <- segment(group.smoothed.CNA.object, verbose = 1, alpha = 0.001, undo.splits = "sdundo", undo.SD = 2)
    seg <- group.segment.smoothed.CNA.object$output
    groupResult[[groups[g]]] <- seg
    group.freq = glFrequency(group.segment.smoothed.CNA.object, freqThreshold)
    innerplot <- function(ints, group.freq, g) {
        new <- subset(ints, CHR == 1)
        new <- new[order(new$MAPINFO),]
        for(x in 2:22){tmp <- subset(ints, CHR == x); tmp <- tmp[order(tmp$MAPINFO),]; new <- rbind(new,tmp)}
        new$CHR <- factor(new$CHR, levels=1:22)
        ints <- new
        labels_chr <- data.matrix(summary(as.factor(ints$CHR)))
        test1 <- data.frame(labels_chr, row.names(labels_chr))
        test <- data.frame(unique(ints$CHR))
        colnames(test) = c("chr")
        colnames(test1) = c("count", "chr")
        F1 <- merge(test, test1, by = "chr", sort = F)
        for (i in 2:length(row.names(F1))) {
          F1[i, 2] = F1[i - 1, 2] + F1[i, 2]
        }
        F1$label <- NULL
        F1[1, 3] <- F1[1, 2]/2
        for (i in 2:length(row.names(F1))) {
          F1[i, 3] <- (F1[i, 2] + F1[i - 1, 2])/2
        }
		tmp <- data.frame()
		for(z in F1$chr){tmp <- rbind(tmp,subset(group.freq,chrom == z))}
		group.freq <- tmp; remove(tmp)
        y1 = group.freq$gain
        y2 = group.freq$loss
        graphTitle = paste("Frequency Plot of ", groups[g], 
          " Samples", sep = "")
        plot(y1, type = "h", xaxt = "n", yaxt = "n", 
          col = "blue", main = graphTitle, ylim = range(-1, 
            1), xlab = "Chromosome Number", ylab = paste("Fraction of Samples with Gain or Loss (n=", 
            dim(data_group)[2], ")", sep = ""), xaxs = "i", 
          yaxs = "i")
        points(y2, type = "h", col = "red")
        x = c(-1, -0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 
          0.6, 0.8, 1)
        y = c(1:length(F1[, 2]))
        axis(1, at = c(F1[, 2]), labels = FALSE, tick = TRUE, 
          las = 1, col = "black", lty = "dotted", tck = 1)
        axis(1, at = c(F1[, 3]), labels = F1$chr, tick = FALSE)
        axis(2, at = c(-1,-0.5,0,0.5,1), labels = c(-1,-0.5,0,0.5,1), tick = TRUE, las = 1, 
          col = "black", lty = "dotted", tck = 1)
    }

